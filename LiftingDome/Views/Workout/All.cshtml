@model AllWorkoutsQueryModel
@using LiftingDome.Services.Data.Interfaces;
@inject ICoachService CoachService
@{
	bool isUserCoach = await CoachService.CoachExistsByUserIdAsync(this.User.GetId()!);
}
@{
	ViewBag.Title = "All Workouts";
}
<h2 class="text-center">@ViewBag.Title</h2>
<hr />
@if (this.User.Identity?.IsAuthenticated ?? false)
{
	<a class="btn btn-dark mb-2" asp-controller="Workout" asp-action="Mine"><span style="color:red">My</span> Workouts</a>

	if (isUserCoach)
	{
		<a class="btn btn-dark mb-2" asp-controller="Workout" asp-action="Add"><span style="color:red">Create</span> Workout</a>
	}
}
<form method="get">
	<div class="row">
		<div class="form-group col-md-3 d-flex justify-content-between">
			<div class="form-group">
				<label asp-for="Category"></label>
				<select asp-for="Category" class="form-control">
					<option value="">All</option>
					@foreach (var category in Model.Categories)
					{
						<option value="@category">@category</option>
					}
				</select>
			</div>

			<div class="form-group">
				<label asp-for="WorkoutPerPage"></label>
				<select asp-for="WorkoutPerPage" class="form-control">
					<option value="3">3</option>
					<option value="6">6</option>
					<option value="9">9</option>
				</select>
			</div>
		</div>
		<div class="form-group col-md-3">
			<label asp-for="SearchString"></label>
			<input asp-for="SearchString" class="form-control" placeholder="...">
		</div>
		<div class="form-group col-md-3">
			<div class="form-group">
				<label asp-for="WorkoutSorting"></label>
				<select asp-for="WorkoutSorting" class="form-control">
					<option value="0">Newest</option>
					<option value="1">Oldest</option>
					<option value="2">Lowest price first</option>
					<option value="3">Highest price first</option>
				</select>
			</div>
		</div>
		<div class="col-md-3">
			<div class="form-group mt-4">
				<input class="btn btn-dark" type="submit" value="Search" />
			</div>
		</div>
	</div>
</form>
@{
	int previousPage = Model.CurrentPage - 1;
	if (previousPage < 1)
	{
		previousPage = 1;
	}

	int maxPage = (int)Math.Ceiling((double)Model.TotalWorkouts /
	Model.WorkoutPerPage);

}
<div class="row mb-5">
	<div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start" style="padding-top:5px">
		<a class="btn btn-dark @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
		   asp-controller="Workout"
		   asp-action="All"
		   asp-route-currentPage="@previousPage"
		   asp-route-category="@Model.Category"
		   asp-route-searchTerm="@Model.SearchString"
		   asp-route-sorting="@((int)Model.WorkoutSorting)"><<</a>
	</div>
	@{
		bool shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
		!Model.Workouts.Any();
	}
	<div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end" style="padding-top:5px">
		<a class="btn btn-dark @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
		   asp-controller="Workout"
		   asp-action="All"
		   asp-route-currentPage="@(Model.CurrentPage + 1)"
		   asp-route-category="@Model.Category"
		   asp-route-searchTerm="@Model.SearchString"
		   asp-route-sorting="@((int)Model.WorkoutSorting)">>></a>
	</div>
</div>
@if (!Model.Workouts.Any())
{
	<h2 class="text-center">No workouts found by the given criteria!</h2>
}
<div class="row">
	@foreach (var workout in Model.Workouts)
	{
		<partial name="_WorkoutPartial" model="@workout" />
	}
</div>